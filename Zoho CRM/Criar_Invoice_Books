///
carregamento = zoho.crm.getRecordById("Gest_o_de_Carregamentos",carregamentoID);
//info carregamento;
armazemID = carregamento.get("Armaz_m").get("id");
info armazemID;
armazemInfo = zoho.crm.getRecordById("Armaz_ns",armazemID);
//info armazemInfo;
org_id = "795952927";
pedidoCompleto = invokeurl
[
	url :"https://www.zohoapis.com/crm/v6/Sales_Orders/" + carregamento.get("Pedido").get("id")
	type :GET
	connection:"zohocrm"
];
pedido = pedidoCompleto.get("data").get(0);
//info pedido;
//
account_name = pedido.get("Account_Name").get("name");
account_id = pedido.get("Account_Name").get("id");
account = zoho.crm.getRecordById("Accounts",account_id);
razao = account.get("Account_Name");
CNPJ = account.get("CNPJ");
items = pedido.get("Ordered_Items");
customer = zoho.books.getRecords("contacts",org_id,{"contact_name":account_name},"zoho_books").get("contacts");
customer_with_id = zoho.books.getRecordsByID("contacts",org_id,customer.get(0).get("contact_id"),"zoho_books");
customer_id = customer.get(0).get("contact_id");
//
registro_filial_faturamento = pedido.get("Filial_de_faturamento");
tipoFrete = pedido.get("Tipo_de_Frete");
if(tipoFrete == "FOB")
{
	valorFrete = "0";
}
else if(tipoFrete == "CIF")
{
	valorFrete = pedido.get("Frete");
}
//
valorICMS = pedido.get("Ordered_Items").get(0).get("ICMS");
valorICMS = round(valorICMS,2);
valorICMS = 1 + valorICMS / 100;
//info valorICMS;
//
line_items = {};
custom_fields = {};
for each  item in items
{
	valorBaseEmbalagem = zoho.crm.getRecords("Precifica_es").get(0).get("Valor_Embalagem");
	if(carregamento.get("Embalagem") != null && carregamento.get("Embalagem") == "BIG BAG")
	{
		valorEmbalagem = valorBaseEmbalagem;
	}
	else if(carregamento.get("Embalagem") == "SACARIA" && carregamento.get("Embalagem") != null)
	{
		// 		sacarias = carregamento.get("Quantidade_Carregada") / 0.05;
		// 		info "sacaria = "+sacarias;
		// 		sacarias = ceil(sacarias);
		valorEmbalagem = valorBaseEmbalagem / 0.05;
		//info valorEmbalagem;
	}
	else if(carregamento.get("Embalagem") == "GRANEL" && carregamento.get("Embalagem") != null)
	{
		valorEmbalagem = 0;
	}
	valorUnitario = item.get("List_Price");
	//info valorUnitario;
	grandTotal = valorUnitario * valorICMS + valorEmbalagem;
	//info grandTotal;
	if(carregamento.get("Currency") == "USD")
	{
		// Obtém a taxa de câmbio da moeda de origem para a moeda de destino
		taxa_cambio = pedido.get("Taxa_C_mbio");
		numero1 = round(taxa_cambio,2);
		// Converte o valor do pedido para reais
		valor_em_reais = grandTotal * numero1;
		valor_em_reais = round(valor_em_reais,2);
		//info valor_em_reais;
		// 		valorTotal = numero1 * pedido.get("Grand_Total");
		// 		valorTotal = round(valorTotal,2);
		// 		info valorTotal;
	}
	else if(carregamento.get("Currency") == "BRL")
	{
		valor_em_reais = grandTotal;
		// 		valorTotal = pedido.get("Grand_Total");
		// 		info valorTotal;
	}
	item_books = zoho.books.getRecords("items",org_id,{"name":item.get("Product_Name").get("name")},"zoho_books").get("items").get(0);
	it = {"item_id":item_books.get("item_id"),"name":item_books.get("name"),"quantity":carregamento.get("Quantidade_Carregada"),"rate":valor_em_reais};
	line_items.insert(it);
}
//Transportadora
transportadoraID = carregamento.get("Transportadora").get("id");
//info transportadoraID;
transportadora = zoho.crm.getRecordById("Transportadoras",transportadoraID);
//info transportadora;
// Adicionar campos personalizados
customfieldInvoice = {"api_name":"cf_pedido_crm","value":pedido.get("Subject")};
custom_fields.insert(customfieldInvoice);
customfieldInvoice1 = {"api_name":"cf_armaz_m","value":armazemInfo.get("Name")};
custom_fields.insert(customfieldInvoice1);
customfieldInvoice2 = {"api_name":"cf_endere_o_carregamento","value":armazemInfo.get("Logradouro_de_Triagem")};
custom_fields.insert(customfieldInvoice2);
customfieldInvoice3 = {"api_name":"cf_n_oc","value":carregamento.get("Name")};
custom_fields.insert(customfieldInvoice3);
customfieldInvoice4 = {"api_name":"cf_esp_cie","value":carregamento.get("Embalagem")};
custom_fields.insert(customfieldInvoice4);
// customfieldInvoice5 = {"api_name":"cf_valor_do_pagamento","value":valorTotal};
// custom_fields.insert(customfieldInvoice5);
customfieldInvoice6 = {"api_name":"cf_raz_o_social_transportador","value":transportadora.get("Name")};
custom_fields.insert(customfieldInvoice6);
customfieldInvoice7 = {"api_name":"cf_ie_do_transportador","value":transportadora.get("Inscri_o_Estadual")};
custom_fields.insert(customfieldInvoice7);
customfieldInvoice8 = {"api_name":"cf_logradouro_transportador","value":transportadora.get("Logradouro")};
custom_fields.insert(customfieldInvoice8);
customfieldInvoice9 = {"api_name":"cf_munic_pio_transportador","value":transportadora.get("Cidade")};
custom_fields.insert(customfieldInvoice9);
customfieldInvoice10 = {"api_name":"cf_uf_transportador","value":transportadora.get("UF")};
custom_fields.insert(customfieldInvoice10);
customfieldInvoice11 = {"api_name":"cf_cnpj","value":transportadora.get("CNPJ")};
custom_fields.insert(customfieldInvoice11);
customfieldInvoice12 = {"api_name":"cf_cpf","value":carregamento.get("CPF_do_Motorista")};
custom_fields.insert(customfieldInvoice12);
customfieldInvoice14 = {"api_name":"cf_nome_motorista","value":carregamento.get("Nome_do_Motorista")};
custom_fields.insert(customfieldInvoice14);
placa_veiculo = "";
// Verifica se o campo "Cavalo" está preenchido
if(carregamento.get("Cavalo") != null)
{
	placa_veiculo = carregamento.get("Cavalo");
}
// Verifica se o campo "Carreta_N_1" está preenchido
if(carregamento.get("Carreta_N_1") != null)
{
	// Se o campo "Cavalo" também estiver preenchido, adiciona uma barra antes de adicionar o próximo valor
	if(placa_veiculo != null)
	{
		placa_veiculo = placa_veiculo + "/";
	}
	placa_veiculo = placa_veiculo + carregamento.get("Carreta_N_1");
}
// Verifica se o campo "Carreta_N_2" está preenchido
if(carregamento.get("Carreta_N_2") != null)
{
	// Se algum valor já estiver presente, adiciona uma barra antes de adicionar o próximo valor
	if(placa_veiculo != null)
	{
		placa_veiculo = placa_veiculo + "/";
	}
	placa_veiculo = placa_veiculo + carregamento.get("Carreta_N_2");
}
// Verifica se o campo "Carreta_N_3" está preenchido
if(carregamento.get("Carreta_N_3") != null)
{
	// Se algum valor já estiver presente, adiciona uma barra antes de adicionar o próximo valor
	if(placa_veiculo != null)
	{
		placa_veiculo = placa_veiculo + "/";
	}
	placa_veiculo = placa_veiculo + carregamento.get("Carreta_N_3");
}
customfieldInvoice15 = {"api_name":"cf_placa_do_veiculo","value":placa_veiculo};
custom_fields.insert(customfieldInvoice15);
customfieldInvoice16 = {"api_name":"cf_peso_l_quido","value":carregamento.get("Quantidade_Carregada")};
custom_fields.insert(customfieldInvoice16);
customfieldInvoice17 = {"api_name":"cf_peso_bruto","value":carregamento.get("Peso_Bruto")};
custom_fields.insert(customfieldInvoice17);
//
stringConcatenada = "";
// Verifique se a lista 'carregamento.get("O_V_Fornecedor")' não está vazia
if(!isEmpty(carregamento.get("Pedido_Fornecedor")))
{
	// Loop através dos valores na lista
	for each  valor in carregamento.get("Pedido_Fornecedor")
	{
		valor = valor.get("Desmembramento_OV_1");
		// Adicione o valor atual à string concatenada, seguido por "/"
		stringConcatenada = stringConcatenada + valor + "/";
	}
	// Remova a última "/" da string concatenada
	stringConcatenada = substring(stringConcatenada,0,length(stringConcatenada) - 1);
}
customfieldInvoice18 = {"api_name":"cf_ov_fornecedor","value":stringConcatenada};
custom_fields.insert(customfieldInvoice18);
customfieldInvoice19 = {"api_name":"cf_data_do_ptax","value":pedido.get("Data_do_PTAX")};
custom_fields.insert(customfieldInvoice19);
customfieldInvoice20 = {"api_name":"cf_taxa_ptax","value":pedido.get("Taxa_C_mbio")};
custom_fields.insert(customfieldInvoice20);
tipo_frete = carregamento.get("Tipo_de_Frete");
// Verifica se o valor do tipo de frete é "CIF"
if(tipo_frete == "CIF")
{
	valor_tipo_frete = "0 - Emitente - (CIF)";
}
// Verifica se o valor do tipo de frete é "FOB"
else if(tipo_frete == "FOB")
{
	valor_tipo_frete = "1 - Destinatário - (FOB)";
}
// Insere o valor na custom field
customfieldInvoice16 = {"api_name":"cf_frete_por_conta_de","value":valor_tipo_frete};
custom_fields.insert(customfieldInvoice16);
//
if(registro_filial_faturamento == "Autem Brasil Matriz")
{
	filiais = "3645965000000673708";
}
else if(registro_filial_faturamento == "Autem Brasil GO")
{
	filiais = "3645965000000673743";
}
else if(registro_filial_faturamento == "Autem Brasil SC")
{
	filiais = "3645965000000673773";
}
else if(registro_filial_faturamento == "Autem Brasil MS")
{
	filiais = "3645965000000673767";
}
else if(registro_filial_faturamento == "Autem Brasil MG")
{
	filiais = "3645965000000673761";
}
else if(registro_filial_faturamento == "Autem Brasil SP")
{
	filiais = "3645965000000673755";
}
else if(registro_filial_faturamento == "Autem Brasil MT")
{
	filiais = "3645965000000673749";
}
//
arg = {"currency_code":"BRL","currency_id":"3645965000000075082","customer_id":customer_id,"customer_name":razao,"date":today.toString("yyyy-MM-dd"),"custom_fields":custom_fields,"line_items":line_items,"shipping_charge":valorFrete,"branch_id":filiais};
info arg;
res = {"code":200,"message":"deu"};
res = zoho.books.createRecord("invoices",org_id,arg,"zoho_books");
info res;